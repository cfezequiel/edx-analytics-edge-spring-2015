2^2
2^3
r <- 1.05
P <- nestegg
P * r^30
monthly <- m
P
81391723 / 35
T <- P * r^30
T
annual_T <- T / 35
annual_T
monthly_T <- annual_T / 12
monthly_T
T
annual_T
monthly_T
115000 * 1.03^30
115000 * 12
1380000 * 1.03^30
1380000 * 1.03^15
1380000 * 1.03^16
1380000 * 1.03^17
1380000 * 1.03^18
mean(monthly_expenses)
1500000 * 1.15^35
setwd("~/Code/AnalyticsEdge/Unit2")
setwd("~/Code/AnalyticsEdge/Unit3")
# Read in the dataset
framingham = read.csv("framingham.csv")
# Look at structure
str(framingham)
# Load the library caTools
library(caTools)
# Randomly split the data into training and testing sets
set.seed(1000)
split = sample.split(framingham$TenYearCHD, SplitRatio = 0.65)
# Split up the data using subset
train = subset(framingham, split==TRUE)
test = subset(framingham, split==FALSE)
# Logistic Regression Model
framinghamLog = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
predictTest = predict(framinghamLog, type="response", newdata=test)
table(test$TenYearCHD, predictTest > 0.5)
library(ROCR)
ROCRpred = prediction(predictTest, test$TenYearCHD)
as.numeric(performance(ROCRpred, "auc")@y.values)
11 / (11 + 187)
1069 / ( 1069 + 6)
summary(framinghamLog)
polling = read.csv("PollingData.csv")
str(polling)
table(polling$Year)
summary(polling)
summary(polling)
install.packages("mice")
library(mice)
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
summary(imputed)
polling$Rasmussen = imputed$Rasmussen
polling$SurveyUSA = imputed$SurveyUSA
summary(polling)
Train = subset(polling, Year == 2004 | Year == 2008)
Test = subset(polling, Year == 2012)
table(Train$Republican)
sign(20)
table(sign(Train$Rasmussen))
table(Train$Republican, sign(Train$Rasmussen))
cor(Train)
str(Train)
cor(Train)
cor(Train[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount", "Republican")])
mod1 = glm(Republican~PropR, data=Train, family="binomial")
summary(mod1)
pred1 = predict(mod1, type="response")
table(Train$Republican, pred1 >= 0.5)
cor(Train[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount", "Republican")])
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
pred2 = predict(mod2, type="response")
table(Train$Republican, pred2 >= 0.5)
summary(mod2)
table(Test$Republican, sign(Test$Rasmussen))
TestPrediction = predict(mod2, newdata=Test, type="response")
table(Test$Republican, TestPrediction >= 0.5)
subset(Test, TestPrediction >= 0.5 & Republican == 0)
table(Test$Republican, TestPrediction >= 0.5)
TestPrediction = predict(mod2, newdata=Test, type="response")
summary(mod2)
table(Test$Republican, sign(Test$Rasmussen))
TestPrediction = predict(mod2, newdata=Test, type="response")
table(Test$Republican, TestPrediction >= 0.5)
subset(Test, TestPrediction >= 0.5 & Republican == 0)
songs = read.csv('songs.csv')
str(songs)
summary(songs)
head(songs)
str(songs[songs$year == 2010,])
str(songs$artistname[songs$artistname == "Michael Jackson"])
str(songs$artistname[songs$artistname == "Michael Jackson",])
str(songs[songs$artistname == "Michael Jackson",])
str(songs[songs$artistname == "Michael Jackson" && songs$Top10 == 1,])
which(songs$artistname == 'Michael Jackson' && songs$Top10 == 1)
which(songs$artistname == 'Michael Jackson' and songs$Top10 == 1)
str(songs)
which(songs$artistname == 'Michael Jackson' && songs$Top10 == 1)
mj_songs <- songs[songs$artistname == 'Michael Jackson',]
str(mj_songs)
which(mj_songs$Top10 == 1)
mj_songs$songtitle[which(mj_songs$Top10 == 1)]
mj_songs$songtitle[1]
mj_songs$songtitle[4]
mj_songs$songtitle[7]
mj_songs$songtitle[15]
mj_songs$songtitle[18]
str(songs$timesignature)
summary(songs$timesignature)
str(songs$timesignature)
str(songs)
(songs$timesignature)
summary(songs$timesignature)
which(songs$timesignature == 1)
which(songs$timesignature == 2)
table(songs$timesignature)
mode(song$timesignature)
str(songs)
which(max(songs$temp))
which(max(songs$tempo))
max(songs$tempo)
which(songs$tempo == max(songs$tempo))
songs$songtitle[which(songs$tempo == max(songs$tempo))]
SongsTrain <- subset(songs, year <= 2009)
SongsTest <- subset(songs, year == 2010)
str(SongsTest)
str(SongsTrain)
nonvars <- c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[, !(names(SongsTrain)%in%nonvars)]
SongsTest = SongsTst[, !(names(SongsTest)%in%nonvars)]
SongsTest = SongsTest[, !(names(SongsTest)%in%nonvars)]
SongsLog1 <- glm(Top10 ~., data=SongsTrain, family=binomial)
summary(SongsLog1)
cor(SongsTrain$loudness, SongsTrain$energy)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
summary(SongsLog2)
SongsLog3 = glm(Top10 ~ . - energy, data=SongsTrain, family=binomial)
summary(SongsLog3)
SongsPred3 = predict(SongsLog3, newdata=SongsTest, type="response")
summary(SongsPred3)
summary(SongsPred3 >= 0.45)
table(SongsTest$Top10, SongsPred3 >= 45)
table(SongsTest$Top10, SongsPred3 >= 0.45)
accuracy <- (309 + 19) / (309 + 5)
accuracy
accuracy <- (309 + 19) / (309 + 40)
accuracy <- (309 + 19) / (309 + 40)
accuracy
num
?num
cnum
accuracy <- (309 + 19) / nrow(SongsPred3)
accuracy
accuracy <- (309 + 19) / nrow(SongsTest$Top10)
accuracy
nrow(SongsTest$Top10)
nrow(SongsTest)
accuracy <- (309 + 19) / nrow(SongsTest)
accuracy
table(SongsTest$Top10)
314/
nrow(SongsTest)
SongsTest$Top10 == 0
nrow(SongsTest$Top10 == 0)
which(SongsTest$Top10 == 0)
count(which(SongsTest$Top10 == 0))
accuracy
baseline
baseline
baseline <- 314 / nrow(SongsTest)
baseline
table(SongsTest$Top10, SongsPred3 >= 0.45)
sensitivity <- 19 / (19 + 40)
specificity <- 309 / (309 + 5)
specificity
sensitivity
table(SongsTest$Top10)
Parole <- read.csv('parole.csv')
str(Parole)
table(Parole$violator)
str(Parole)
as.factor(Parole$race)
as.factor(state)
as.factor(Parole$state)
Parole$State
Parole
head(Parole)
Parole$state
as.factor(Parole$state)
Parole$state <- as.factor(Parole$state)
Parole$crime <- as.factor(Parole$crime)
summary(Parole)
Parole <- read.csv('parole.csv')
summary(Parole)
Parole$state <- as.factor(Parole$state)
Parole$crime <- as.factor(Parole$crime)
summary(Parole)
summary(Parole)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
split = sample.split(Parole$violator, SplitRatio = 0.7)
train <- subset(parole, split == TRUE)
test <- subset(parole, split == FALSE)
train <- subset(Parole, split == TRUE)
test <- subset(Parole, split == FALSE)
table(split)
473 / (473 + 202)
et.seed(144)
library(caTools)
split = sample.split(Parole$violator, SplitRatio = 0.7)
train <- subset(Parole, split == TRUE)
test <- subset(Parole, split == FALSE)
set.seed(144)
library(caTools)
split = sample.split(Parole$violator, SplitRatio = 0.7)
train <- subset(Parole, split == TRUE)
test <- subset(Parole, split == FALSE)
ParoleLog = glm(violator ~ ., data=train, family=binomial)
summary(ParoleLog)
exp(1.6119919)
Odds <- exp(LogOdds)
LogOdds <- -(0.3869904*1 + 0.8867192*1 -0.0001756*50 - 0.1238867*3 + 0.0802954*12 + 0.6837143*1)
Odds <- exp(LogOdds)
Odds
LogOdds <- -(0.3869904*1 + 0.8867192*1 - 0.0001756*50 - 0.1238867*3 + 0.0802954*12 + 0.6837143*1 - 4.2411574)
Odds <- exp(LogOdds)
Odds
LogOdds <- 0.3869904*1 + 0.8867192*1 - 0.0001756*50 - 0.1238867*3 + 0.0802954*12 + 0.6837143*1 - 4.2411574
Odds <- exp(LogOdds)
Odds
Prob <- 1 / (1 + exp(-LogOdds))
Prob
ParolePred = predict(ParoleLog, newdata=test, type="response")
summary(ParolePred)
table(test$violator, ParolePred >= 0.5)
sensivity <- 12 / (12 + 11)
specificity <- 167 / (167 + 12)
accuracy <- (167 + 12) / nrow(test)
sensitivity
specificity
accuracy
sensitivity <- 12 / (12 + 11)
sensitivity
table(test$violator)
baseline_accuracy <- 179 / nrow(test)
baseline_accuracy
table(test$violator, ParolePred >= 0.5)
table(test$violator, ParolePred >= 0.2)
accuracy <- (17 + 154) / nrow(test)
accuracy
table(test$violator, ParolePred >= 0.1)
accuracy <- (20 + 130) / nrow(test)
accuracy
table(test$violator, ParolePred >= 0.7)
(176 + 3) / nrow(test)
ROCRpred = prediction(ParolePred, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
loans <- read.csv('loans.csv')
str(loans)
?prop
table(loads$not.fully.paid)
table(loans$not.fully.paid)
1533 / (1533 + 8045)
prop.table(table(loads$not.fully.paid))
prop.table(table(loans$not.fully.paid))
summary(loans)
str(loans)
is.na(loans)
na_loans <- subset(loans, is.na(loans))
na_loans
summary(na_loans)
na_loans <- subset(loans, is.na(pub.rec))
na_loans
summary(na_loans)
na_loans <- subset(loans, is.na(log.annual.inc))
summary(na_loans)
str(na_loans)
na_loans <- subset(loans, is.na(log.annual.inc) + is.na(days.with.cr.line))
na_loans <- subset(loans, is.na(log.annual.inc) && is.na(days.with.cr.line) && is.na(revol.util) && is.na(inq.last.6mths) && is.na(delinq.2yrs) && is.na(pub.rec))
str(na_loans)
na_loans <- subset(loans, is.na(log.annual.inc) || is.na(days.with.cr.line) || is.na(revol.util) || is.na(inq.last.6mths) || is.na(delinq.2yrs) || is.na(pub.rec))
str(na_loans)
na_loans <- subset(loans, is.na(loans$log.annual.inc) || is.na(loans$days.with.cr.line) || is.na(loans$revol.util) || is.na(loans$inq.last.6mths) || is.na(loans$delinq.2yrs) || is.na(loans$pub.rec))
str(na_loans)
summary(na_loans)
subset(loans, is.na(log.annual.inc))
subset(loans, is.na(log.annual.inc) || is.na(pub.rec))
subset(loans, is.na(log.annual.inc), is.na(pub.rec))
subset(loans, is.na(log.annual.inc) + is.na(pub.rec))
subset(loans, is.na(log.annual.inc, pub.rec))
subset(loans, is.na(pub.rec))
na_loans <- subset(loans, is.na(pub.rec))
str(na_loans)
table(na_loans$not.fully.paid)
set.seed(144)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
summary(loans)
ref_loans <- read.csv('loans_imputed.csv')
summary(ref_loans)
loans <- read.csv('loans_imputed.csv')
set.seed(144)
split = sample.split(Parole$violator, SplitRatio = 0.7)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
str(loans)
LoansLog = glm(not.fully.paid ~ ., data=LoansTrain, family=binomial)
summary(LoansLog)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
LoansLog = glm(not.fully.paid ~ ., data=LoansTrain, family=binomial)
summary(LoansLog)
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
LoansLog = glm(not.fully.paid ~ ., data=LoansTrain, family=binomial)
summary(LoansLog)
Ldiff <- -9.317e-03 * (700 - 710)
Ldiff
exp(0.09317)
predicted.risk = predict(LoansLog, newdata=LoansTest, type="response")
summary(predicted.risk)
table(LoansTest$not.fully.paid, predicted.risk >= 0.5)
LoansTest$predicted.risk <- predicted.risk
acc <- (3 + 2400) / nrow(LoansTest)
acc
table(LoansTest$not.fully.paid)
baseline_acc <- 2413 / nrow(LoansTest)
baseline_acc
library(ROCR)
ROCRpred = prediction(predicted.risk, LoansTest$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
LoansPred2 <- predict(LoansLog2, newData=LoansTest, type="response")
summary(LoansPred2)
table(LoansTest$not.fully.paid, LoansPred2 >= 0.5)
str(LoansPred2)
str(LoansTest$not.fully.paid)
LoansPred2 <- predict(LoansLog2, newData=LoansTest, type="response")
summary(LoansPred2)
str(LoansTest)
str(LoansPred2)
LoansTest <- subset(loans, split == FALSE)
str(LoansTest)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
LoansPred2 <- predict(LoansLog2, newData=LoansTest, type="response")
str(LoansPred2)
str(LoansTrain)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
LoansPred2 <- predict(LoansLog2, newData=LoansTest, type="response")
str(LoansPred2)
summary(LoansLog2)
LoansPred2 <- predict(LoansLog2, newData=LoansTest, type="response")
LoansPred2
LoansPred2[0]
predicted.risk = predict(LoansLog, newdata=LoansTest, type="response")
str(predicted.risk)
LoansPred = predict(LoansLog2, newdata=LoansTest, type="response")
str(LoansPred)
str(LoansPred)
table(LoansTest$not.fully.paid, LoansPred)
table(LoansTest$not.fully.paid, LoansPred >= 0.5)
str(LoansPred)
LoansTrain <- subset(loans, split == TRUE)
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
LoansPred = predict(LoansLog2, newdata=LoansTest, type="response")
str(LoansPred)
table(LoansTest$not.fully.paid, LoansPred >= 0.5)
table(LoansPred)
str(LoansTrain$int.rate)
table(LoansTest$not.fully.paid, LoansPred >= 0.5)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
LoansPred = predict(LoansLog2, newdata=LoansTest, type="response")
LoansPred
str(LoansPred)
str(LoansPred[1])
LoansPred
summary(LoansPred)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
LoansPred = predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, LoansPred >= 0.5)
summary(LoansPred)
2413 + 460
LoansPred <- predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, LoansPred >= 0.5)
summary(LoansPred)
LoansPred
head(LoansPred)
LoansTest <- subset(loans, split == FALSE)
LoansPred <- predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, LoansPred >= 0.5)
summary(LoansPred)
head(LoansPred)
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
str(LoansTest)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
LoansPred <- predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, LoansPred >= 0.5)
summary(LoansPred)
head(LoansPred)
head(LoansTrain)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
head(LoansTrain)
head(LoansTest)
base.pred <- predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, base.pred >= 0.5)
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
LoansLog = glm(not.fully.paid ~ ., data=LoansTrain, family=binomial)
summary(LoansLog)
predicted.risk = predict(LoansLog, newdata=LoansTest, type="response")
LoansTest$predicted.risk <- predicted.risk
table(LoansTest$not.fully.paid, predicted.risk >= 0.5)
acc <- (3 + 2400) / nrow(LoansTest)
acc
baseline_acc <- 2413 / nrow(LoansTest)
baseline_acc
library(ROCR)
ROCRpred = prediction(predicted.risk, LoansTest$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
LoansLog2 = glm(not.fully.paid ~ int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
base.pred <- predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, base.pred >= 0.5)
base.pred <- predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, base.pred >= 0.5)
LoansLog2 = glm(not.fully.paid~int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
LoansLog2 = glm(not.fully.paid~int.rate, data=LoansTrain, family=binomial)
summary(LoansLog2)
base.pred <- predict(LoansLog2, newdata=LoansTest, type="response")
table(LoansTest$not.fully.paid, base.pred >= 0.5)
table(LoansTest$not.fully.paid, base.pred >= 0.2)
table(LoansTest$not.fully.paid, base.pred > 0.5)
table(LoansTest$not.fully.paid, base.pred >= 0.5)
ROCRpred = prediction(base.pred, LoansTest$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
I = 10 * exp((0.06)*(3))
I
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
LoansTrain <- subset(loans, split == TRUE)
LoansTest <- subset(loans, split == FALSE)
predicted.risk = predict(LoansLog, newdata=LoansTest, type="response")
LoansTest$predicted.risk <- predicted.risk
LoansTest$profit <- exp(LoansTest$int.rate*3) - 1
LoansTest$profit[LoansTest$not.fully.paid==1] = -1
max(LoansTest$profit)
maxProfit10 <- 10 * max(LoansTest$profit)
maxProfit10
highInterest <- subset(LoansTest, LoansTest$int.rate >= 0.15)
summary(highInterest)
profit <- exp(0.1651)*(3)
profit
profit <- exp(highInterest$int.rate)*(3)
summary(profit)
prop.table(table(highInterest$not.fully.paid))
highInterest$int.rate
profit <- exp((highInterest$int.rate)*(3))
summary(profit)
profit <- exp((highInterest$int.rate)*(3)) - 1
summary(profit)
profit
exp(mean(highInterest$int.rate) * 3) - 1
summary(profit)
summary(highInterest$int.rate)
exp(0.1651*3) - 1
summary(highInterest$profit)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff
selectedLoans <- subset(highInterest, highInterest$predicted.risk <= cutoff)
sum(selectedLoans$profit)
nrow(selectedLoans)
table(selectedLoans$not.fully.paid)
