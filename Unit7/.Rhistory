11 + 7 + 56 + 7
genre
prop.table(genre)
prop.table(twoway,1)
genre
prop.table(genre)
prop.table(twoway,1)
table(acl$Genre)
grammy <- table(acl$Grammy)
grammy
twoway <- table(acl$Genre, acl$Grammy)
twoway
barplot(twoway, legent=T, beside=T)
barplot(twoway, legend=T, beside=T)
twoway <- table(acl$Grammy, acl$Genre)
twoway
barplot(twoway, legend=T, beside=T)
grammy
PA <- 49 / (49 + 67)
PA
twoway
prop.table(genre)
prop.table(twoway,1)
grammy
prop.table(grammy)
prop.table(twoway,1)
twoway
12 + 6 + 26 + 5
prop.table(twoway,1)
prop.table(twoway,2)
prop.table(grammy)
barplot(prop.table(twoway,2), legend=T, beside=T)
prop.table(grammy)
table(acl$Facebook.100k)
table(acl$Age.Group, acl$Facebook.100k)
agegroup <- table(acl$Age.Group, acl$Facebook.100k)
prop.table(agegroup, 1)
c(1,2;3,4)
data.frame(1,2;3,4)
grades <- data.frame(c('A','B','C','D','F'), c(5,10,9,10,6), c(8,10,9,7,4), c(11,5,4,4,2), c(9,9,4,2,0))
View(grades)
View(grades)
help(data.frame)
d <- data.frame(x = 1, y= 1:10, fac = fac)
d <- data.frame(x = 1, y= 1:10)
View(d)
d <- data.frame(x = c(1,2,3,4,5), y= 1:10)
View(d)
help(table)
(5 + 8 + 11 + 9) / (5 + 8 + 11 + 9 + 10 + 10 + 5 + 9 + 9 + 9 + 4 + 4 +10 + 7 + 4 + 2 + 6 +4 + 2 + 0)
total = (5 + 8 + 11 + 9 + 10 + 10 + 5 + 9 + 9 + 9 + 4 + 4 +10 + 7 + 4 + 2 + 6 +4 + 2 + 0)
(11 + 5+ 4 + 4 + 2 + 9 + 9 + 4 + 2 + 0) / total
6 / (5 + 10 + 9 + 10 + 6)
10 / (10 + 10 + 5 + 9)
10 / total
(11 + 5 + 4 + 4) / (11 + 5 + 4 + 4 + 2)
(9+9+4+2) / total
2 / (10 + 7 + 4 + 2)
.15 / .35
.12 * 50 + .35 * 80
34 / 130
.12 * 50
.34 * 50
.30 * 50
.24 * 50
17 + 15 + 12 + 6
6 / 50
library(SDSFoundations)
WR <- WorldRecords
head(WR)
View(WR)
table(WR$Event)
help(count)
help(len)
help(number)
help(size)
??size
??count
length(table(WR$Event))
mens100m <- WR[WR$Event == 'Mens 100m',]
View(mens100m)
View(mens100m)
View(WR)
womens1mile <- WR[WR$Event == ]
womens1mile <- WR[WR$Event == 'Womens Mile',]
View(womens1mile)
help(sort)
sort(womens1mile)
View(womens1mile)
which(womens1mile$time < 260)
which(womens1mile$record < 260)
which(womens1mile$Record < 260)
library(SDSFoundations)
menshot <- WR[WR$Event=='Mens Shotput',]
womenshot <- WR[WR$Event=='Womens Shotput',]
menshot <- WR[WR$Event=='Mens Shotput',]
View(menshot)
View(menshot)
View(menshot)
plot(menshot$Year,menshot$Record,main='Mens Shotput World Records',xlab='Year',ylab='World Record Distance (m)',pch=16)
View(menshot)
plot(womenshot$Year,womenshot$Record,main='Womens Shotput World Records',xlab='Year',ylab='World Record Distance (m)',pch=16)
linFit(menshot$Year, menshot$Record)
linFit(womenshot$Year,womenshot$Record)
plot(menshot$Year,menshot$Record,main='Mens Shotput World Records',xlab='Year',ylab='World Record Distance (m)',pch=16)
linFit(menshot$Year, menshot$Record)
linFit(menshot$Year, menshot$Record)
linFit(womenshot$Year,womenshot$Record)
mensmile <- WR[WR$Event == 'Mens Mile',]
View(mensmile)
womensmile <- WR[WR$Event == 'Womens Mile',]
View(womensmile)
View(mensmile)
View(mensmile)
View(mensmile)
plot(mensmile$Year,mensmile$Record,main='Mens Mile World Records',xlab='Year',ylab='World Record Time (s)',pch=16)
plot(womensmile$Year,womensmile$Record,main='Womens Mile World Records',xlab='Year',ylab='World Record Time (s)',pch=16)
linFit(mensmile$Year, mensmile$Record)
linFit(womenmile$Year,womenmile$Record)
linFit(womensmile$Year,womensmile$Record)
plot(mensmile$Year,mensmile$Record,main='Mens Mile World Records',xlab='Year',ylab='World Record Time (s)',pch=16)
plot(womensmile$Year,womensmile$Record,main='Womens Mile World Records',xlab='Year',ylab='World Record Time (s)',pch=16)
linFit(mensmile$Year, mensmile$Record)
linFit(womensmile$Year,womensmile$Record)
help(inv)
inverse
0.5^-1
-0.39347^-1
-0.97288^-1
cor(mensmile$Year, mensmile$Record)
r = cor(mensmile$Year, mensmile$Record)
r^2
View(WR)
table(WR$Event)
menspole <- WR[WR$Event == 'Mens Polevault',]
View(menspole)
menspole <- WR[WR$Event == 'Mens Polevault' & WR$Year >= 1970,]
View(menspole)
which(menspole$Record > 6.00)
plot(menspole$Year, menspole$Record)
linFit(menspole$Year, menspole$Record)
C = c(140, 280, 420, 560)
h = c(0,2,4,6)
linFit(h,C)
4 * 175
700 / 70
560 / 4
175 * 4
700 - 140
560 / 4
560 / 70
y = 70*8 + 140
y
y = linFit(h,C)
y
2.84 + .04*970
2.84 + .04*9.70
3.71 - 2.84
2.84 + .04*14.5
2.91 - 3.42
library(SDSFoundations)
world <- WorldBankData
head(world)
which(world$IncomeGroup == 'Low Income')
which(world$IncomeGroup == 'Low income')
which(world$IncomeGroup == 'Low income')[0]
a = which(world$IncomeGroup == 'Low income')
a
a[0]
a[1]
world[54,]
world[54:55,]
View(world)
View(world)
View(world)
View(world)
which(world$Country == 'Aruba' & year == '1970')$rural.population
which(world$Country == 'Aruba' & world$year == '1970')$rural.population
which(world$Country == 'Aruba' & world$year == '1970')
world$rural.population[11]
which(world$Country == 'Australia' & world$mobile.users > 0)
world$year[611]
a = which(world$Country == 'Australia' & world$mobile.users > 0)
world$year[a]
library(SDSFoundations)
# Subset data for just the United States and name the new data frame "us"
us <- world[world$Country.Code == "USA",]
# Select the years from 1990 and name the new data frame "us_select"
us_select <- us[us$year >= 1990, ]
# Make the number of users more interpretable (into millions)
us_select$internet.mil <- us_select$internet.users / 1000000
# Create a new variable that is "years since 1990"
us_select$time <- us_select$year - 1990
# Select the first 10 years (from 1990 to 1999) and name the new data frame "us_select_10"
us_select_10 <- us_select[us_select$time < 10,]
# Use a function to fit an exponential and logistic model for 1990-1999
expFit(us_select_10$time, us_select_10$internet.mil)
logisticFit(us_select_10$time, us_select_10$internet.mil)
# Based on the prior model parameters, predict the number of internet users in 2006
e <- expFitPred(us_select_10$time, us_select_10$internet.mil, 16)
l <- logisticFitPred(us_select_10$time, us_select_10$internet.mil, 16)
# Show how many internet users the US actually had in 2006
us_select[us_select$time == 16, c("Country", "year", "internet.mil")]
# Calculate the residuals for each model
us_select$internet.mil[us_select$time == 16] - e
us_select$internet.mil[us_select$time == 16] - l
# Look at the model fits for all available data (1990 to 2012)
expFit(us_select$time, us_select$internet.mil)
logisticFit(us_select$time, us_select$internet.mil)
# Which model fits the best?
tripleFit(us_select$time, us_select$internet.mil)
# How many internet users would the US have had in 2012 if you had used the original exponential model?
expFitPred(us_select_10$time, us_select_10$internet.mil, 22)
expFitPred(us_select_10$time, us_select_10$internet.mil, 22)
expFitPred(us_select_10$time, us_select_10$internet.mil, 22)
ee <- expFitPred(us_select_10$time, us_select_10$internet.mil, 22)
View(world)
inet_users_prop <- world$internet.users / world$population
head inet_users_prop
head(inet_users_prop)
inet_users_prop
world_1990_up <- world[world$year >= 1990,]
world$internet.users_prop = world$internet.users / world$population
View(world)
View(world_1990_up)
world_1990_up <- world[world$year >= 1990,]
View(world_1990_up)
world_1990_up$years_since_1990 <- world_1990_up$year - 1990
View(world_1990_up)
denmark <- world_1990_up[world_1990_up$Country = 'Denmark',]
denmark <- world_1990_up[world_1990_up$Country == 'Denmark',]
belarus <- world_1990_up[world_1990_up$Country == 'Belarus',]
expFit(denmark$years_since_1990, denmark$internet.users_prop)
logisticFit(denmark$years_since_1990, denmark$internet.users_prop)
expFit(belarus$years_since_1990, belarus$internet.users_prop)
logisticFit(belarus$years_since_1990, belarus$internet.users_prop)
expFit(denmark$years_since_1990, denmark$internet.users_prop)
(denmark$years_since_1990, denmark$internet.users_prop)
logisticFit(denmark$years_since_1990, denmark$internet.users_prop)
expFit(belarus$years_since_1990, belarus$internet.users_prop)
logisticFit(belarus$years_since_1990, belarus$internet.users_prop)
logisticFit(denmark$years_since_1990, denmark$internet.users_prop)
ln(1)
log(1)
log((0.1 * 308.8345)/(0.89668-0.1))/log(1.73124)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 6)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 8)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFit(belarus$years_since_1990, belarus$internet.users_prop)
log((0.1 * 422.4322)/(0.8987-0.1))/log(1.31884)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 14)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 15)
logisticFit(denmark$years_since_1990, denmark$internet.users_prop)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 6)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 14)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 15)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 14)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 15)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 15)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 30)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 29)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 30)
world$internet.users_prop = world$internet.users / world$population
world_1990_up <- world[world$year >= 1990,]
world_1990_up$years_since_1990 <- world_1990_up$year - 1990
denmark <- world_1990_up[world_1990_up$Country == 'Denmark',]
belarus <- world_1990_up[world_1990_up$Country == 'Belarus',]
# denmark
expFit(denmark$years_since_1990, denmark$internet.users_prop)
logisticFit(denmark$years_since_1990, denmark$internet.users_prop)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 15)
# belarus
expFit(belarus$years_since_1990, belarus$internet.users_prop)
logisticFit(belarus$years_since_1990, belarus$internet.users_prop)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 30)
logisticFit(belarus$years_since_1990, belarus$internet.users_prop)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 15)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 14)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 30)
logisticFitPred(belarus$years_since_1990, belarus$internet.users_prop, 29)
29 - 14
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 6)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 7)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 14)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 15)
logisticFitPred(denmark$years_since_1990, denmark$internet.users_prop, 14)
cls
brazil <- world[which(world$Country == 'Brazil' & world$year >= 1995),]
View(brazil)
brazil$year <- brazil$year - 1995
view(brazil)
View(brazil)
brazil$mobile.users <- brazil$mobile.users / 1000000
View(brazil)
brazil$mobile.users[brazil$year == 5]
which(brazil$mobile.users >= 100)
brazil$year <- brazil$year + 1995
View(brazil)
brazil[13,]
brazil$time <- brazil$year - 1995
tripleFit(brazil$time, brazil$mobile.users)
logisticFitPred(brazil$time, brazil$mobile.users)
logisticFitPred(brazil$time, brazil$mobile.users, 2025 - 1995)
367 - 257
367 / 257
257 * 1.42
257 * 1.428
257 * 1.428016
257 * 1.49
257 * 1.43
2^2
2^3
76.64*1.46^14
3273.31 / (1 + 43.59 * 1.57 ^ 14)
3273.31 / (1 + 43.59 * (1.57 ^ 14))
3273.31 / (1 + 43.59 * (1.57 ^ -14))
4379 - 15325
4379 - 3034
(45 - 25) / (3-1)
45 / 25 - 1
sqrt(4)
sqrt(45/25)
25 / 1.34
45 / 1.34 ^ 3
45 / (1.34 ^ 3)
25 / 1.34
2012 - 1996
2012 - 1995
10 * 17 + 15
19 * 1.34 ^ 17
1.34 ^ 17
19 * 1.34 ^ 17
19 * 1.34 ^ 7
log(152.10) / log(2.17)
2000 / (1 + 152.10 * 2.17 ^ -9)
`2015.02.15_Personal.Expense` <- read.csv("~/Dropbox/ExpenseManager/CSV/2015-02-15_Personal Expense.csv")
View(`2015.02.15_Personal.Expense`)
`2015.02.15_Personal_Expense` <- read.csv("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.csv")
View(`2015.02.15_Personal_Expense`)
`2015.02.15_Personal_Expense` <- read.csv("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.csv")
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
save.image("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.RData")
View(`2015.02.15_Personal_Expense`)
head(data)
data <- 2015.02.15_Personal_expense
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
head(data)
head(data)
data
data[0]
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
load("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.RData")
View(`2015.02.15_Personal_Expense`)
head(`2015.02.15_Personal_Expense`)
tabe(`2015.02.15_Personal_Expense`)
table(`2015.02.15_Personal_Expense`)
data <- `2015.02.15_Personal_Expense`
View(`2015.02.15_Personal_Expense`)
View(data)
type
help(type)
typeof(data[0,[])
typeof(data[0,0)
typeof(data[0,0])
data$Date
data$Date[0]
as.Date(data$Date[0])
typeof(data$Date[0,0])
typeof(data$Date[0])
as.String(data$Date[0])
as.character(data$Date[0])
monthly = c(36518.40, 31904.14, 31932.83, 28319.32, 32883.77)
sum(monthly)
average(monthly)
mean(monthly)
monthly_expenses <- monthly
m <- mean(monthly) + 20000
m
annual <- m * 12
nestegg <- annual * 30
2^2
2^3
r <- 1.05
P <- nestegg
P * r^30
monthly <- m
P
81391723 / 35
T <- P * r^30
T
annual_T <- T / 35
annual_T
monthly_T <- annual_T / 12
monthly_T
T
annual_T
monthly_T
115000 * 1.03^30
115000 * 12
1380000 * 1.03^30
1380000 * 1.03^15
1380000 * 1.03^16
1380000 * 1.03^17
1380000 * 1.03^18
mean(monthly_expenses)
1500000 * 1.15^35
install.packages("ggplot2")
update.packages(checkBuilt=TRUE)
y
install.packages("ggplot2")
install.packages("ggplot2")
library(caret)
install.packages("e1071")
library(e1071)
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
install.packages("class")
install.packages("class")
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
library(caTools)
library(rpart)
library(rpart.plot)
library(ROCR)
library(randomForest)
library(caret)
library(e1071)
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
train
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("ggplot2")
setwd("~/Code/AnalyticsEdge/Unit7")
tweets = read.csv("tweets.csv")
library(tm)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(dtm))
str(allTweets)
install.packages("wordcloud")
library(wordcloud)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25))
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(dtm))
str(allTweets)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25))
sort(colSums(allTweets))
head(tweets)
allTweets[which(tweets$Avg < 0),]
negTweets = allTweets[which(tweets$Avg < 0),]
corpufy = function(v) {
corpus = Corpus(VectorSource(v))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
dtm = DocumentTermMatrix(corpus)
words = as.data.frame(as.matrix(dtm))
return(words)
}
allTweets = corpufy(tweets$Tweet)
str(allTweets)
wordcloud(colnames(negTweets), colSums(negTweets), scale=c(2, 0.25))
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), random.order=FALSE)
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=90)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=45)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=TRUE)
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=.2)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(4, 0.5), rot.per=.2)
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(4, 0.5), random.color=TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), random.color=TRUE)
install.packages("RColorBrewer")
library(RColorBrewer)
brewer.pal()
?brewer
display.brewer.all()
print(display.brewer.all())
display.brewer.all()
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors=brewer.pal(9, "Blues"))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors=brewer.pal(9, "Blues")[c(5,6,7,8,9)])
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors=brewer.pal(9, "Blues")[c(-1,-2,-3,-4)])
