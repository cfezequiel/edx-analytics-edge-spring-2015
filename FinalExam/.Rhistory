19 * 1.34 ^ 17
19 * 1.34 ^ 7
log(152.10) / log(2.17)
2000 / (1 + 152.10 * 2.17 ^ -9)
`2015.02.15_Personal.Expense` <- read.csv("~/Dropbox/ExpenseManager/CSV/2015-02-15_Personal Expense.csv")
View(`2015.02.15_Personal.Expense`)
`2015.02.15_Personal_Expense` <- read.csv("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.csv")
View(`2015.02.15_Personal_Expense`)
`2015.02.15_Personal_Expense` <- read.csv("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.csv")
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
save.image("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.RData")
View(`2015.02.15_Personal_Expense`)
head(data)
data <- 2015.02.15_Personal_expense
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
head(data)
head(data)
data
data[0]
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
View(`2015.02.15_Personal_Expense`)
load("~/Dropbox/ExpenseManager/analysis/2015-02-15_Personal_Expense.RData")
View(`2015.02.15_Personal_Expense`)
head(`2015.02.15_Personal_Expense`)
tabe(`2015.02.15_Personal_Expense`)
table(`2015.02.15_Personal_Expense`)
data <- `2015.02.15_Personal_Expense`
View(`2015.02.15_Personal_Expense`)
View(data)
type
help(type)
typeof(data[0,[])
typeof(data[0,0)
typeof(data[0,0])
data$Date
data$Date[0]
as.Date(data$Date[0])
typeof(data$Date[0,0])
typeof(data$Date[0])
as.String(data$Date[0])
as.character(data$Date[0])
monthly = c(36518.40, 31904.14, 31932.83, 28319.32, 32883.77)
sum(monthly)
average(monthly)
mean(monthly)
monthly_expenses <- monthly
m <- mean(monthly) + 20000
m
annual <- m * 12
nestegg <- annual * 30
2^2
2^3
r <- 1.05
P <- nestegg
P * r^30
monthly <- m
P
81391723 / 35
T <- P * r^30
T
annual_T <- T / 35
annual_T
monthly_T <- annual_T / 12
monthly_T
T
annual_T
monthly_T
115000 * 1.03^30
115000 * 12
1380000 * 1.03^30
1380000 * 1.03^15
1380000 * 1.03^16
1380000 * 1.03^17
1380000 * 1.03^18
mean(monthly_expenses)
1500000 * 1.15^35
install.packages("ggplot2")
update.packages(checkBuilt=TRUE)
y
install.packages("ggplot2")
install.packages("ggplot2")
library(caret)
install.packages("e1071")
library(e1071)
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
install.packages("class")
install.packages("class")
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
library(caTools)
library(rpart)
library(rpart.plot)
library(ROCR)
library(randomForest)
library(caret)
library(e1071)
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
train
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("ggplot2")
setwd("~/Code/AnalyticsEdge/FinalExam")
Airlines = read.csv('AirlineDelay.csv')
set.seed(15071)
spl = sample(nrow(Airlines), 0.7*nrow(Airlines)))
spl = sample(nrow(Airlines), 0.7*nrow(Airlines))
spl = sample(nrow(Airlines), 0.7*nrow(Airlines))
AirlinesTrain = Airlines[spl,]
AirlinesTest = Airlines[-spl,]
nrow(AirlinesTrain)
nrow(AirlinesTest)
library(caTools)
spl2 = sample.split(Airlines$TotalDelay, 0.7)
linreg = lm(TotalDelay ~ ., data=AirlinesTrain)
summary(linreg)
cor(AirlinesTrain$NumPrevFlights, AirlinesTrain$PrevFlightGap)
cor(AirlinesTrain$OriginAvgWind, AirlinesTrain$OriginWindGust)
linreg = lm(TotalDelay ~ ., data=AirlinesTrain)
summary(linreg)
set.seed(15071)
spl = sample(nrow(Airlines), 0.7*nrow(Airlines))
AirlinesTrain = Airlines[spl,]
AirlinesTest = Airlines[-spl,]
nrow(AirlinesTrain)
nrow(AirlinesTest)
linreg = lm(TotalDelay ~ ., data=AirlinesTrain)
summary(linreg)
set.seed(15071)
spl = sample(nrow(Airlines), 0.7*nrow(Airlines))
AirlinesTrain = Airlines[spl,]
AirlinesTest = Airlines[-spl,]
nrow(AirlinesTrain)
nrow(AirlinesTest)
linreg = lm(TotalDelay ~ ., data=AirlinesTrain)
summary(linreg)
1.571501 - (-5.418356)
abs(-4.506943 - -5.418356)
lrpred = predict(linreg, newdata=AirlinesTest)
SSE = sum((lrpred - AirlinesTest$TotalDelay)^2)
SSE
lrpred
AirlinesTest$TotalDelay
SST
SST = sum((mean(AirlinesTrain$TotalDelay) - AirlinesTest$TotalDelay)^2)
SST
R2 = 1 - SSE/SST
R2
SSE
SST
linreg = lm(TotalDelay ~ ., data=AirlinesTrain)
summary(linreg)
Airlines$DelayClass = factor(ifelse(Airlines$TotalDelay == 0, "No Delay", ifelse(Airlines$TotalDelay >= 30, "Major Delay", "Minor Delay")))
which(Airlines$DelayClass == "No Delay")
length(which(Airlines$DelayClass == "No Delay"))
length(which(Airlines$DelayClass == "Minor Delay"))
length(which(Airlines$DelayClass == "Major Delay"))
set.seed(15071)
spl = sample(nrow(Airlines), 0.7*nrow(Airlines))
library(caTools)
set.seed(15071)
library(caTools)
spl = sample.split(Airlines$DelayClass, SplitRatio=0.7)
AirlinesTrain = subset(Airlines, spl==TRUE)
AirlinesTest = subset(Airlines, spl==FALSE)
library(rpart)
library(rpart.plot)
CARTmodel <- rpart(DelayClass ~ ., data=Airlines)
plot(CARTmodel)
library(rpart)
library(rpart.plot)
CARTmodel <- rpart(DelayClass ~ ., data=AirlinesTrain)
plot(CARTmodel)
rpart.plot(CARTmodel)
Airlines$DelayClass = factor(ifelse(Airlines$TotalDelay == 0, "No Delay", ifelse(Airlines$TotalDelay >= 30, "Major Delay", "Minor Delay")))
length(which(Airlines$DelayClass == "No Delay"))
length(which(Airlines$DelayClass == "Minor Delay"))
length(which(Airlines$DelayClass == "Major Delay"))
Airlines$TotalDelay = NULL
set.seed(15071)
library(caTools)
spl = sample.split(Airlines$DelayClass, SplitRatio=0.7)
AirlinesTrain = subset(Airlines, spl==TRUE)
AirlinesTest = subset(Airlines, spl==FALSE)
library(rpart)
library(rpart.plot)
CARTmodel <- rpart(DelayClass ~ ., data=AirlinesTrain)
rpart.plot(CARTmodel)
Airlines = read.csv('AirlineDelay.csv')
Airlines$DelayClass = factor(ifelse(Airlines$TotalDelay == 0, "No Delay", ifelse(Airlines$TotalDelay >= 30, "Major Delay", "Minor Delay")))
Airlines$TotalDelay = NULL
set.seed(15071)
library(caTools)
spl = sample.split(Airlines$DelayClass, SplitRatio=0.7)
AirlinesTrain = subset(Airlines, spl==TRUE)
AirlinesTest = subset(Airlines, spl==FALSE)
library(rpart)
library(rpart.plot)
CARTmodel <- rpart(DelayClass ~ ., data=AirlinesTrain)
rpart.plot(CARTmodel)
CARTpred = predict(CARTmodel, newdata=AirlinesTest)
CARTpred
CARTpred = predict(CARTmodel, newdata=AirlinesTest, type="class")
CARTpred
table(AirlinesTest$DelayClass, CARTpred)
table(AirlinesTest$DelayClass, CARTpred)
acc = (0 + 153 + 1301) / nrow(AirlinesTest)
acc
table(AirlinesTest$DelayClass)
table(AirlinesTrain$DelayClass)
3282 / nrow(AirlinesTrain)
CARTpred = predict(CARTmodel, type="class")
CARTpred
table(AirlinesTest$DelayClass, CARTpred)
table(AirlinesTrain$DelayClass, CARTpred)
CARTpred = predict(CARTmodel, type="class")
table(AirlinesTrain$DelayClass, CARTpred)
acc = (0 + 361 + 3094) / nrow(AirlinesTrain)
acc
table(AirlinesTrain$DelayClass, CARTpred)
table(AirlinesTrain$DelayClass, CARTpred)
CARTpred = predict(CARTmodel, type="class")
table(AirlinesTrain$DelayClass, CARTpred)
acc = (0 + 361 + 3094) / nrow(AirlinesTrain)
acc
CARTpred = predict(CARTmodel, newdata=AirlinesTest, type="class")
table(AirlinesTest$DelayClass, CARTpred)
acc = (153 + 1301) / nrow(AirlinesTest)
acc
linreg = lm(TotalDelay ~ ., data=AirlinesTrain)
Airlines = read.csv('AirlineDelay.csv')
set.seed(15071)
spl = sample(nrow(Airlines), 0.7*nrow(Airlines))
AirlinesTrain = Airlines[spl,]
AirlinesTest = Airlines[-spl,]
linreg = lm(TotalDelay ~ ., data=AirlinesTrain)
summary(linreg)
15/18
R2 = 1 - SSE/SST
R2
eBay = read.csv('ebay.csv')
eBay = read.csv('ebay.csv')
table(eBay$sold)
prop.table(table(eBay$sold))
summary(eBay)
str(eBay)
summary(eBay$biddable)
summary(eBay$sold)
summary(eBay$startprice)
is.na(eBay$startprice)
table(is.na(eBay$startprice))
table(is.na(eBay$sold))
table(is.na(eBay$biddable))
table(is.na(eBay$size))
summary(eBay$size)
hist
hist(eBay$size)
hist(eBay$size, breaks=12)
hist(eBay$size, breaks=12)
eBay$sold = as.factor(eBay$sold)
eBay$condition = as.factor(eBay$condition)
eBay$heel = as.factor(eBay$heel)
eBay$style = as.factor(eBay$style)
eBay$color = as.factor(eBay$color)
eBay$material = as.factor(eBay$material)
set.seed(144)
library(caTools)
spl = sample.split(eBay$sold, 0.7)
spl = sample.split(eBay$sold, 0.7)
training = subset(eBay, spl==TRUE)
training = subset(eBay, spl==FALSE)
set.seed(144)
library(caTools)
spl = sample.split(eBay$sold, 0.7)
training = subset(eBay, spl==TRUE)
testing = subset(eBay, spl==FALSE)
model.log = glm(sold ~ biddable + startprice + condition + heel + style + color + material, data=training, family=binomial)
summary(model.log)
pred1 = -0.0044423*100 + -0.4952981*1 + 0.1224260*1 + 0.5268920*1 + 0.2226547*1 + -1.1078098*1
pred1
pred1.log = -0.0044423*100 + -0.4952981*1 + 0.1224260*1 + 0.5268920*1 + 0.2226547*1 + -1.1078098*1
prob = 1 / (1 + exp(-pred1.log))
prob
odds = exp(0.8325406)
odds = exp(0.8325406)
odds
odds2 = exp(0.5268920)
odds2
odds2 - odds
(odds - odds2) / (odds2)
model.log = glm(sold ~ biddable + startprice + condition + heel + style + color + material, data=training, family=binomial)
pred.log = predict(model.log, newdata=testing, type="response")
table(testing$sold, pred.log >= 0.5)
table(testing$sold)
table(pred.log >= 0.5)
abs(1059 - 899)
abs((899 + 240) - 1059)
library(ROCR)
ROCRpred = prediction(pred.log, testing$sold)
as.numeric(performance(ROCRpred, "auc")@y.values)
plot(ROCRpred)
perf <- performance(ROCRpred,"tpr","fpr")
plot(perf)
ROCRpred = prediction(pred.log >= 0.5, testing$sold)
(23 - 4) / 23
plot(perf, colorize=TRUE)
plot(perf, colorize=TRUE)
(23 - 5) / 23
set.seed(144)
library(caret)
library(e1071)
?sqe
?seq
seq(0.001, 0.05, 0.001)
length(seq(0.001, 0.05, 0.001))
train(sold ~ biddable + startprice + condition + heel + style + color + material, data=training, method="rpart", trControl=numFolds, tuneGrid=cartGrid)
set.seed(144)
library(caret)
library(e1071)
numFolds <- trainControl(method="cv", number=10)
cartGrid <- expand.grid(.cp = seq(0.001,0.05,0.001))
train(sold ~ biddable + startprice + condition + heel + style + color + material, data=training, method="rpart", trControl=numFolds, tuneGrid=cartGrid)
library(rpart)
library(rpart.plot)
model.CART = rpart(sold ~ biddable + startprice + condition + heel + style + color + material, data=training, cp=0.005)
prp(model.CART)
prp(model.CART)
corpus = Corpus(VectorSource(eBay$description))
library(tm)
corpus = Corpus(VectorSource(eBay$description))
corpus = Corpus(VectorSource(eBay$description))
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
corpus = Corpus(VectorSource(eBay$description))
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
corpus = Corpus(VectorSource(eBay$description))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
summary(dtm)
str(dtm)
df = as.data.frame(as.matrix(dtm))
corpus = Corpus(VectorSource(eBay$description))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
str(dtm)
df = as.data.frame(as.matrix(dtm))
summary(df)
str(df)
dtm <- removeSparseTerms(dtm, 0.90)
df = as.data.frame(as.matrix(dtm))
dtm = DocumentTermMatrix(corpus)
spdtm <- removeSparseTerms(dtm, 0.90)
df = as.data.frame(as.matrix(spdtm))
str(df)
descriptionText = as.data.frame(as.matrix(spdtm))
summary(descriptionText)
View(descriptionText)
sapply(descriptionText, sum)
sort(sapply(descriptionText, sum))
names(descriptionText) = paste0("D", names(descriptionText))
names(descriptionText) = paste0("D", names(descriptionText))
descriptionText = as.data.frame(as.matrix(spdtm))
names(descriptionText) = paste0("D", names(descriptionText))
View(descriptionText)
descriptionText$sold = eBay$sold
descriptionText$biddable = eBay$biddable
descriptionText$startprice = eBay$startprice
descriptionText$condition = eBay$condition
descriptionText$heel = eBay$heel
descriptionText$style = eBay$style
descriptionText$color = eBay$color
descriptionText$material = eBay$material
str(descriptionText)
length(names(descriptionText))
set.seed(144)
spl = sample.split(descriptionText$sold, 0.7)
trainText = subset(descriptionText, spl==TRUE)
spl = sample.split(descriptionText$sold, 0.7)
trainText = subset(descriptionText, spl==TRUE)
testText = subset(descriptionText, spl==FALSE)
length(names(testText))
glmText = glm(sold ~ ., data=descriptionText, family=binomial)
summary(glmText)
set.seed(144)
spl = sample.split(descriptionText$sold, 0.7)
trainText = subset(descriptionText, spl==TRUE)
testText = subset(descriptionText, spl==FALSE)
length(names(testText))
glmText = glm(sold ~ ., data=descriptionText, family=binomial)
summary(glmText)
library(ROCR)
predTrainText = predict(glmText, type="class")
predTrainText = predict(glmText, type="response")
predROCR <- prediction(predTrainText, trainText$sold)
predTrainText
predTrainText[[1]]
predTrainText[1]
trainText$sold
length(predTrainText)
length(trainText$sold)
trainText = subset(descriptionText, spl==TRUE)
glmText = glm(sold ~ ., data=trainText, family=binomial)
summary(glmText)
predTrainText = predict(glmText, type="response")
length(predTrainText)
length(trainText$sold)
predROCR <- prediction(predTrainText, trainText$sold)
performance(predROCR, "auc")@y.values
predText = predict(glmText, newdata=testText, type="response")
predROCR <- prediction(predText, testText$sold)
performance(predROCR, "auc")@y.values
(23 - 8)/23
hubway.trips = read.csv('HubwayTrips.csv')
nrow(hubway.trips)
str(hubway.trips)
summary(hubway.trips)
which(hubway.trips$Weekday == 1)
str(hubway.trips)
summary(hubway.trips$Duration[hubway.trips$Weekday == 1])
summary(hubway.trips$Duration[hubway.trips$Weekday == 0])
nrow(hubway.trips[hubway.trips$Morning == 1])
nrow(hubway.trips[hubway.trips$Morning == 1,])
nrow(hubway.trips[hubway.trips$Afternoon == 1,])
nrow(hubway.trips[hubway.trips$Evening == 1,])
table(hubway.trips$Male)
prop.table(table(hubway.trips$Male))
summary(hubway.trips)
library(caret)
preproc = preProcess(hubway.trips)
hubway.trips.norm = predict(preproc, hubway.trips)
summary(hubway.trips.norm)
set.seed(5000)
hubway.trips.kmeans = kmeans(hubway.trips.norm, centers=10)
spl = split(hubway.trips.norm, hubway.trips.kmeans$cluster)
spl
lapply(spl, nrow)
sort(lapply(spl, nrow))
lapply(spl, summary)
spl2 = split(hubway.trips, hubway.trips.kmeans$cluster)
lapply(spl2, summary)
hubway.trips.kmeans2 = kmeans(hubway.trips.norm, centers=10)
spl3 = split(hubway.trips.norm, hubway.trips.kmeans$cluster)
lapply(spl3, nrow)
hubway.trips.kmeans = kmeans(hubway.trips.norm, centers=10)
spl = split(hubway.trips.norm, hubway.trips.kmeans$cluster)
lapply(spl, nrow)
lapply(spl3, nrow)
lapply(spl, nrow)
lapply(spl3, nrow)
set.seed(5000)
hubway.trips.kmeans = kmeans(hubway.trips.norm, centers=10)
spl = split(hubway.trips.norm, hubway.trips.kmeans$cluster)
lapply(spl, nrow)
hubway.trips.kmeans2 = kmeans(hubway.trips.norm, centers=10)
spl3 = split(hubway.trips.norm, hubway.trips.kmeans2$cluster)
lapply(spl3, nrow)
set.seed(5000)
hubway.trips.kmeans = kmeans(hubway.trips.norm, centers=10)
spl = split(hubway.trips.norm, hubway.trips.kmeans$cluster)
lapply(spl, nrow)
set.seed(5000)
hubway.trips.kmeans2 = kmeans(hubway.trips.norm, centers=10)
spl3 = split(hubway.trips.norm, hubway.trips.kmeans2$cluster)
lapply(spl3, nrow)
set.seed(5000)
hubway.trips.kmeans = kmeans(hubway.trips.norm, centers=10)
spl = split(hubway.trips.norm, hubway.trips.kmeans$cluster)
lapply(spl, nrow)
set.seed(4000)
hubway.trips.kmeans2 = kmeans(hubway.trips.norm, centers=10)
spl3 = split(hubway.trips.norm, hubway.trips.kmeans2$cluster)
lapply(spl3, nrow)
set.seed(8000)
hubway.trips.kmeans3 = kmeans(hubway.trips.norm, centers=10)
set.seed(8000)
hubway.trips.kmeans3 = kmeans(hubway.trips.norm, centers=20)
summary(hubway.trips.kmeans3)
summary(hubway.trips.kmeans3$cluster)
spl4 = split(hubway.trips.norm, hubway.trips.kmeans3$cluster)
lapply(spl4, nrow)
spl5 = split(hubway.trips, hubway.trips.kmeans3$cluster)
lapply(spl5, summary)
mean(c(1,2,3))
mean(c(45891,738.6,748.6, 767.7, 687.5, 876.1, 646.4, 673.8, 772.1, 586, 734.6, 680.7, 729.4, 689.1, 844.8, 617.1, 621.4, 744.3, 9335, 840))
summary(c(45891,738.6,748.6, 767.7, 687.5, 876.1, 646.4, 673.8, 772.1, 586, 734.6, 680.7, 729.4, 689.1, 844.8, 617.1, 621.4, 744.3, 9335, 840))
